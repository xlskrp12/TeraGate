#	디바이스 Device, 디바이스 컨텍스트 DeviceContext
-	DirectX 9에서는 Device하나만 존재했다.
	DirectX10부터 Device를 기능에 따라 Device, DeviceContext로 분할했다.
-	Device는 생성을 할 때 사용한다. 접두어 ID3D11Device
	DeviceContext는 렌더링 관련 일을 할 때 사용한다. 접두어 ID3D11DeviceContext
-	Device, DeviceContext는 각각 한 개씩만 있으면 된다.
    DirectX11의 기능을 사용하기 위한 클래스 변수라 생각하면 된다.

#	스왑체인 SwapChain, IDXGISwapchain
-	모니터에 그려질 전면버퍼와 GPU연산으로 그리는 후면버퍼를 바꿔준다.
	Present()로 전면버퍼와 후면버퍼를 바꾼다.

#	텍스쳐 Texture, ID3D11Texture2D
-	2차원 배열로 이루어져있으며 각 원소당 픽셀 하나의 정보를 가진다.
	텍스쳐를 이용해 필터링, 다중표본화(안티 앨리어싱) 등을 적용할 수 있다.
-	원소 타입을 설정할 수 있다. 
	예컨데 DXGI_FORMAT_R32G32B32_FLOAT는 3개의 float를 가진 3차원 Vector를 담을 수 있다는 뜻.

#	깊이버퍼 DepthBuffer, ID3D11DepthStencilView
-	3D상에서 가깝고 멈의 원근을 나타내기 위한 텍스쳐.
	각 원소는 픽셀의 깊이 정보를 담고 있다.
	후면버퍼와 1:1 대응한다.
	0~1의 상대값은 근~원을 의미한다.

#	GPU Resource
-	버퍼 Buffer, 텍스쳐 Texture 등
	응용프로그램에서 GPU에 접근할 수 있는 메모리 자원.


#	렌더링 파이프라인
1.	입력조립기 IA, Input Assembler
2.	정점셰이더 VS, Vertex Shader
3.  정점셰이더 이후 자동으로 되는 단계(코딩을 안해도 되는 단계)
	덮개 셰이더
	테셀레이션
	영역셰이더
	기하셰이더 GS, Geometry Shader
	SO, Stream Output
	RS, Resterrizer Stage
4.	픽셀셰이더 PS, Pixel Shader

#	입력조립기 IA, Input Assembler
-	CPU에서 GPU 텍스쳐 자원으로 전달
	정점버퍼, 인덱스버퍼, InputLayout, PrimitiveTopology등 필요
-	Input Layout
	버퍼의 구성이 어떻게 되어있는지
	ex) 위치, 컬러, 텍스쳐, 노말과 각 성분이 몇 바이트인지 등
-	Primitive Topology
	점, 선, 면(삼각형)
	선일 때는 STRIP인지 LIST인지 추가로 정해줘야 한다.
	STRIP은 정점을 공유해서 이어서 그린다. ex) 0-1-2-3
	LIST 는 정점을 공유하지 않고 그린다.   ex) 0-1, 2-3
-	Index Buffer
	정점들을 인덱스를 이용해 재활용한다.
	ex) 0,1,2-1,3,2 : 정점 4개로 삼각형을 2개 그린다.

#	정점셰이더 VS, Vertex Shader
-	입력조립기 IA에서 각 정보에 따라 조립된 정점들(점or선or면)이 VS단계로 입력된다.
	입력된 정점을 좌표 연산 후 다음 단계로 넘긴다. (월드변환 등)

#	정점셰이더 이후 자동으로 되는 단계(코딩을 안해도 되는 단계)
-	정점셰이더에서 출력된 정점을 여러 단계를 통해 실제 픽셀로 표현할 수 있게 만든다.
	RS에서 정점보간으로 픽셀을 정한 후 다음 단계로 넘어간다.

#	픽셀셰이더 PS, Pixel Shader
-	RS이후 나온 픽셀들을 연산한다.
	ex) 텍스쳐를 입히거나, 조명, 반사, 그림자효과를 주는 등
-	셰이더 코드로 작성한다.
