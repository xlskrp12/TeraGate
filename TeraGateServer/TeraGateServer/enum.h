#include "packet.h"


const static float GATE_RADIUS = 3000;
const static D3DXVECTOR3 GATE_C_POS = D3DXVECTOR3(0, 0, 0);
const static D3DXVECTOR3 GATE_L_POS = D3DXVECTOR3(GATE_RADIUS*cos(DEGREE_TO_RADIAN(210)), 0, GATE_RADIUS*sin(DEGREE_TO_RADIAN(210)));
const static D3DXVECTOR3 GATE_LN_POS = D3DXVECTOR3(GATE_RADIUS*cos(DEGREE_TO_RADIAN(170)), 0, GATE_RADIUS*sin(DEGREE_TO_RADIAN(170)));
const static D3DXVECTOR3 GATE_LR_POS = D3DXVECTOR3(GATE_RADIUS*cos(DEGREE_TO_RADIAN(250)), 0, GATE_RADIUS*sin(DEGREE_TO_RADIAN(250)));
const static D3DXVECTOR3 GATE_LC_POS = D3DXVECTOR3(GATE_RADIUS*cos(DEGREE_TO_RADIAN(210)) / 2, 0, GATE_RADIUS*sin(DEGREE_TO_RADIAN(210)) / 2);
const static D3DXVECTOR3 GATE_R_POS = D3DXVECTOR3(GATE_RADIUS*cos(DEGREE_TO_RADIAN(-30)), 0, GATE_RADIUS*sin(DEGREE_TO_RADIAN(-30)));
const static D3DXVECTOR3 GATE_RL_POS = D3DXVECTOR3(GATE_RADIUS*cos(DEGREE_TO_RADIAN(-70)), 0, GATE_RADIUS*sin(DEGREE_TO_RADIAN(-70)));
const static D3DXVECTOR3 GATE_RN_POS = D3DXVECTOR3(GATE_RADIUS*cos(DEGREE_TO_RADIAN(10)), 0, GATE_RADIUS*sin(DEGREE_TO_RADIAN(10)));
const static D3DXVECTOR3 GATE_RC_POS = D3DXVECTOR3(GATE_RADIUS*cos(DEGREE_TO_RADIAN(-30)) / 2, 0, GATE_RADIUS*sin(DEGREE_TO_RADIAN(-30)) / 2);
const static D3DXVECTOR3 GATE_N_POS = D3DXVECTOR3(GATE_RADIUS*cos(DEGREE_TO_RADIAN(90)), 0, GATE_RADIUS*sin(DEGREE_TO_RADIAN(90)));
const static D3DXVECTOR3 GATE_NL_POS = D3DXVECTOR3(GATE_RADIUS*cos(DEGREE_TO_RADIAN(130)), 0, GATE_RADIUS*sin(DEGREE_TO_RADIAN(130)));
const static D3DXVECTOR3 GATE_NR_POS = D3DXVECTOR3(GATE_RADIUS*cos(DEGREE_TO_RADIAN(50)), 0, GATE_RADIUS*sin(DEGREE_TO_RADIAN(50)));
const static D3DXVECTOR3 GATE_NC_POS = D3DXVECTOR3(GATE_RADIUS*cos(DEGREE_TO_RADIAN(90)) / 2, 0, GATE_RADIUS*sin(DEGREE_TO_RADIAN(90)) / 2);


enum {
	// C ¡ﬂæ”
	// L  øﬁ¬ ∆¿ ∏ﬁ¿Œ∞‘¿Ã∆Æ
	// LC øﬁ¬ ∆¿ø°º≠ ¡ﬂæ” ±Ê ∞‘¿Ã∆Æ
	// LN øﬁ¬ ∆¿ø°º≠ ø£««ææ ∆¿(¿ß¬  ∆¿) ±Ê ∞‘¿Ã∆Æ
	// LR øﬁ¬ ∆¿ø°º≠ ø¿∏•¬  ∆¿ ±Ê ∞‘¿Ã∆Æ
	GATE_C,
	GATE_L,
	GATE_LN,
	GATE_LR,
	GATE_LC,
	GATE_R,
	GATE_RN,
	GATE_RL,
	GATE_RC,
	GATE_N,
	GATE_NL,
	GATE_NR,
	GATE_NC,
	GATE_TOTAL
};

enum {
	TEAM_L,// ∆¿ ∑π«¡∆Æ (øﬁ¬ ∆¿)
	TEAM_R,// ∆¿ ∂Û¿Ã∆Æ (ø¿∏•¬ ∆¿)
	TEAM_N,// ∆¿ ø£««ææ (¿≠∆¿)
	TEAM_TOTAL
};